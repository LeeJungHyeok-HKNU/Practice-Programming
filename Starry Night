#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <windows.h>
/*

	Starry night.
	2020-07-02
	lee junghyeok

*/

//iterable 
int i;
int j;
int k;
int l;

//variable
int x1;
int x2;
int xG;


//random variable
int r1;
int r2;

//type of star
int type;

//CONSTS
const int DISPLAY_WIDTH = 230;

//functions to print
void printSpace(int x);
void printStar();
int printGalaxy(int width);
void printMoon(int x);
void printUniverseSpace(int x);
void printStarSpace(int x);

void printNormal();
void printUniverseNormal();

//type of universe 
void universeNormal();
void universeGalaxy();
void universeVoid();
void universeStar();

//etc functions
int galaxyWave(int width, int dPointer);
void voidToNormal();

int main()
{
	srand(time(NULL));
	universeNormal();
}

void universeNormal()
{
	int universeType = 0;
	while(1)
	{
		printNormal();
		
		universeType = rand()%1000;
		if(universeType<5)
			universeGalaxy();
		else if(universeType < 7)
		{
			universeVoid();
			voidToNormal();
		}
		else if(universeType<10)
			universeStar();
	}
}

void universeGalaxy()
{
	int drawPointer=0;
	bool endGalaxy = false;
	int galaxyWidth = rand()%50 + 1;
	xG = rand()%DISPLAY_WIDTH;
	for(i=0;i<galaxyWidth;i++)
	{
		printUniverseSpace(xG);
		drawPointer = xG;
		xG--;
		galaxyWave(galaxyWidth, drawPointer);
		drawPointer += printGalaxy(i);
		printUniverseSpace(DISPLAY_WIDTH-drawPointer);
		printf("\n");
	}
	while(1)
	{
		if (endGalaxy == true)
		{
			xG++;
			galaxyWidth -=1;
		}
		printUniverseSpace(xG);
		drawPointer = xG;
		galaxyWidth = galaxyWave(galaxyWidth, drawPointer);
		drawPointer += printGalaxy(galaxyWidth);
		printUniverseSpace(DISPLAY_WIDTH-drawPointer);
		printf("\n");
		r2 = rand()%1000;
		if(r2 == 0)
			endGalaxy = true;
		if (galaxyWidth <2)
			break;
	}
}

void universeVoid()
{
	for(int v=0;v<500;v++)
	{
		int starPrint = rand()%500;
		if(starPrint>v)
			printNormal();
		else
		{
			printSpace(DISPLAY_WIDTH);
			printf("\n");
		}
	}
	while(1)
	{
		type = rand()%6000;
		if(type == 0)
			break;
		else if(type <= 70)
		{
			printStarSpace(DISPLAY_WIDTH);
			printf("\n");
		}
		else
		{
			printSpace(DISPLAY_WIDTH);
			printf("\n");
		}
	}
}

void universeStar()
{
	printf("universeStar");
	int universeType = 0;
	while(1)
	{
		printUniverseNormal();
		
		universeType = rand()%1000;
		if(universeType==0)
			break;
	}
}

int galaxyWave(int width, int dPointer)
{
	x2 = (rand()%5)*(rand()%4) + rand()%3 + 1;
	
	if ((dPointer+width/2)<DISPLAY_WIDTH/2)
		if (rand()%11 < 4)
			xG-= x2;
		else
			xG+= x2;
	else
		if (rand()%11 < 4)
			xG += x2;
		else
			xG -= x2;
		
	if (xG<0)
		xG = 0;
	
	if(xG + width > DISPLAY_WIDTH)
		return DISPLAY_WIDTH - xG;
	
	return width;
}

void voidToNormal()
{
	for(int v=0;v<1000;v++)
	{
		int starPrint = rand()%1000;
		if(starPrint<v)
			printNormal();
		else
		{
			printSpace(DISPLAY_WIDTH);
			printf("\n");
		}
	}
}

void printSpace(int x)
{
	int it;
	for(it=0;it<x;it++)
	{
		printf(" ");
	}
}

void printStar()
{
	char star;
	x2 = rand()%9;
	switch(x2)
	{
		case 0:{
			star = '*';
			break;
		}
		case 1:{
			star = '*';
			break;
		}
		case 2:{
			star = '*';
			break;
		}
		case 3:{
			star = '*';
			break;
		}
		case 4:{
			star = '*';
			break;
		}
		case 5:{
			star = 'o';
			break;
		}
		case 6:{
			star = '.';
			break;
		}
		case 7:{
			star = ';';
			break;
		}
		case 8:{
			star = '*';
			break;
		}
	}
		
	printf("%c", star);
}

void printStarSpace(int x)
{
	int it;
	bool starPrinted = false;
	for(it=0;it<x;it++)
	{
		r1 = rand()%x;
		if ((r1 == 0) && !starPrinted)
		{
			printStar();
			starPrinted = true;
		}
		else
			printf(" ");
	}
}

void printNormal()
{
	type = rand()%1000;
	if(type>0 and type<=5)
		type = 1;
	else if(type>5 and type<=115)
		type = 2;
	else if(type>115 and type<=200)
		type = 3;
	else if(type>200 and type<=250)
		type = 5;
	else if(type>250 and type<=350)
		type = 4;
	else if(type>350 and type<=450)
		type = 6;
	
	x1 = rand()%DISPLAY_WIDTH;
	switch(type)
	{
		case 0:
		{
			x1 -= 20;
			printMoon(x1);
			printSpace(DISPLAY_WIDTH-(x1+23));
			printf("\n");
			break;
		}
		case 1:
		{
			printSpace(x1);
			printf("o");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 2:
		{
			printSpace(x1);
			printf("��");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 3:
		{
			printSpace(x1);
			printf("��");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 4:
		{
			printSpace(x1);
			printf("*");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 5:
		{
			printSpace(x1);
			printf("��");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 6:
		{
			r1 = rand()%3;
			for(i=0;i<r1;i++)
			{
				printSpace(DISPLAY_WIDTH);
				printf("\n");
			}
			break;
		}
		default:
		{
			printSpace(x1);
			printf("'");
			printSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
	}
}

void printUniverseNormal()
{
	type = rand()%1000;
	if(type>0 and type<=5)
		type = 1;
	else if(type>5 and type<=115)
		type = 2;
	else if(type>115 and type<=200)
		type = 3;
	else if(type>200 and type<=250)
		type = 5;
	else if(type>250 and type<=350)
		type = 4;
	else if(type>350 and type<=360)
		type = 6;
	
	x1 = rand()%DISPLAY_WIDTH;
	switch(type)
	{
		case 0:
		{
			x1 -= 20;
			printMoon(x1);
			printUniverseSpace(DISPLAY_WIDTH-(x1+23));
			printf("\n");
			break;
		}
		case 1:
		{
			printUniverseSpace(x1);
			printf("o");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 2:
		{
			printUniverseSpace(x1);
			printf("��");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 3:
		{
			printUniverseSpace(x1);
			printf("��");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 4:
		{
			printUniverseSpace(x1);
			printf("*");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 5:
		{
			printUniverseSpace(x1);
			printf("��");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
		case 6:
		{
			r1 = rand()%3;
			for(i=0;i<r1;i++)
			{
				printUniverseSpace(DISPLAY_WIDTH);
				printf("\n");
			}
			break;
		}
		default:
		{
			printUniverseSpace(x1);
			printf("'");
			printUniverseSpace(DISPLAY_WIDTH-x1-1);
			printf("\n");
			break;
		}
	}
}

void printUniverseSpace(int x)
{
	int it;
	for(it=0;it<x;it++)
	{
		r1 = rand()%(x*2+70);
		if (r1 == 0)
			printStar();
		else
			printf(" ");
	}
}

void printMoon(int x)
{
	for(i=0;i<5;i++)
	{
		if(i<3)
		{
			printUniverseSpace(x-i);
			for(j=0;j<=i+2;j++)
			{
				printf("��");
			}
			printUniverseSpace(DISPLAY_WIDTH-(x+10));
			printf("\n");
		}
		else
		{
			printUniverseSpace(x-(4-i));
			for(j=0;j<=6-i;j++)
			{
				printf("��");
			}
			printUniverseSpace(DISPLAY_WIDTH-(x+10));
			printf("\n");
		}
	}
}

int printGalaxy(int width)
{
	bool done = false;
	int len = 0;
	for(k=0;k<width;k++)
	{
		printStar();
		
		r1 = rand()%3;
		printSpace(r1);
		k += r1;
		
		len += r1;
	}
	return len + width;
}

